"""Implements SeismicDataset class that allows iterating over gathers in surveys by generating small subsets of data
called batches"""

from textwrap import dedent

from .batch import SeismicBatch
from .index import SeismicIndex
from ..batchflow import Dataset


class SeismicDataset(Dataset):
    """A dataset, that generates batches of `SeismicBatch` class. Contains identifiers of seismic gathers from a
    survey or a group of surveys and a specific `batch_class` to create and process small subsets of data.

    Usually, gather identification in a dataset is done using a :class:`~index.SeismicIndex`, which is constructed on
    dataset creation if was not passed directly. Most of the :class:`~dataset.SeismicDataset` arguments are passed to a
    :func:`~index.SeismicIndex.__init__` as is so please refer to its documentation to learn more about gather
    indexing.

    Examples
    --------
    Let's consider a survey we want to process:
    >>> survey = Survey(path, header_index="FieldRecord", header_cols=["TraceNumber", "offset"], name="survey")

    In most cases, dataset creation is identical to that of :class:`~index.SeismicIndex`:
    >>> dataset = SeismicDataset(surveys=survey)

    Similar to the :class:`~index.SeismicIndex` several surveys can be combined together either by merging or
    concatenating. After the dataset is created, a subset of gathers can be obtained via
    :func:`~SeismicDataset.next_batch` method:
    >>> batch = dataset.next_batch(10)

    Here a batch of 10 gathers was created and can now be processed using the methods defined in
    :class:`~batch.SeismicBatch`. The batch does not contain any data yet and gather loading is usually the first
    method you want to call:
    >>> batch.load(src="survey")

    Note, that here we've specified the name of the survey we want to obtain gathers from in `src` argument.

    Parameters
    ----------
    index : DatasetIndex or None, optional
        Unique identifiers of seismic gathers in a dataset. If `index` is not given, it is constructed by instantiating
        a :class:`~index.SeismicIndex` with passed `surveys`, `mode` and `kwargs`.
    surveys : Survey or list of Survey, optional
        Surveys to use to construct an index.
    mode : {"c", "concat", "m", "merge", None}, optional, defaults to None
        A mode used to combine multiple surveys into an index. If `None`, only a single survey can be passes to a
        `surveys` arg.
    batch_class : type, optional, defaults to SeismicBatch
        A class of batches, generated by a dataset. Must be inherited from :class:`~batchflow.Batch`.
    kwargs : misc, optional
        Additional keyword arguments to `SeismicIndex.__init__`.

    Attributes
    ----------
    index : DatasetIndex
        Unique identifiers of seismic gathers in the constructed dataset. Usually has :class:`~index.SeismicIndex` type
        and contains combined headers of all the surveys used to create it in this case.
    batch_class : type
        A class of batches, generated by a dataset. Usually has :class:`~batch.SeismicBatch` type.
    """
    def __init__(self, *args, mode=None, copy_headers=False, batch_class=SeismicBatch, **kwargs):
        index = SeismicIndex(*args, mode=mode, copy_headers=copy_headers, **kwargs)
        super().__init__(index, batch_class=batch_class)

    def __getattr__(self, name):
        return getattr(self.index, name)

    def __str__(self):
        """Print dataset metadata including information about its index and batch class."""
        msg = f"""
        Batch class:               {self.batch_class}
        Index class:               {type(self.index)}

        """
        return (dedent(msg) + str(self.index)).strip()

    def info(self):
        """Print dataset metadata including information about its index and batch class."""
        print(self)

    def create_subset(self, index):
        """Return a new dataset object based on the subset of indices given.

        Notes
        -----
        During the call subset of `self.index.headers` is calculated which may take a while for large indices.

        Parameters
        ----------
        index : SeismicIndex or pd.MultiIndex
            Index values of the subset to create a new `SeismicDataset` object for.

        Returns
        -------
        subset : SeismicDataset
            A subset of the dataset.
        """
        if not isinstance(index, SeismicIndex):
            index = self.index.create_subset(index)
        return type(self)(index, batch_class=self.batch_class)
